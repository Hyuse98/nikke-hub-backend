apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name | default "postgres" }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.labels.app }}
spec:
  serviceName: {{ .Values.service.name | default "postgres-service" }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.statefulset.name | default "postgres" }}
  template:
    metadata:
      labels:
        app: {{ .Values.statefulset.name | default "postgres" }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.statefulset.image }}:{{ .Values.statefulset.tag }}"
          ports:
            - containerPort: {{ .Values.statefulset.port }}
          env:
            - name: POSTGRES_DB
              value: {{ .Values.configMap.databaseName | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.name }}
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.name }}
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: init-script
          configMap:
            name: {{ .Values.configMap.name | default "postgres-init" }}
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.storage }}